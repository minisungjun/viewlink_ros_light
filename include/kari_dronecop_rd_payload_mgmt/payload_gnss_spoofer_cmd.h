// Generated by gencpp from file kari_dronecop_rd_payload_mgmt/payload_gnss_spoofer_cmd.msg
// DO NOT EDIT!


#ifndef KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_GNSS_SPOOFER_CMD_H
#define KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_GNSS_SPOOFER_CMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kari_dronecop_rd_payload_mgmt
{
template <class ContainerAllocator>
struct payload_gnss_spoofer_cmd_
{
  typedef payload_gnss_spoofer_cmd_<ContainerAllocator> Type;

  payload_gnss_spoofer_cmd_()
    : header()
    , gsf_rf_bhvr(0)
    , gsf_rf_band_ctrl(0)
    , decept_ecef_px(0.0)
    , decept_ecef_py(0.0)
    , decept_ecef_pz(0.0)
    , ild_meas_t(0)
    , rd_ecef_px(0.0)
    , rd_ecef_py(0.0)
    , rd_ecef_pz(0.0)
    , rd_ecef_vx(0.0)
    , rd_ecef_vy(0.0)
    , rd_ecef_vz(0.0)
    , ild_ecef_px(0.0)
    , ild_ecef_py(0.0)
    , ild_ecef_pz(0.0)
    , ild_ecef_vx(0.0)
    , ild_ecef_vy(0.0)
    , ild_ecef_vz(0.0)  {
    }
  payload_gnss_spoofer_cmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gsf_rf_bhvr(0)
    , gsf_rf_band_ctrl(0)
    , decept_ecef_px(0.0)
    , decept_ecef_py(0.0)
    , decept_ecef_pz(0.0)
    , ild_meas_t(0)
    , rd_ecef_px(0.0)
    , rd_ecef_py(0.0)
    , rd_ecef_pz(0.0)
    , rd_ecef_vx(0.0)
    , rd_ecef_vy(0.0)
    , rd_ecef_vz(0.0)
    , ild_ecef_px(0.0)
    , ild_ecef_py(0.0)
    , ild_ecef_pz(0.0)
    , ild_ecef_vx(0.0)
    , ild_ecef_vy(0.0)
    , ild_ecef_vz(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _gsf_rf_bhvr_type;
  _gsf_rf_bhvr_type gsf_rf_bhvr;

   typedef int8_t _gsf_rf_band_ctrl_type;
  _gsf_rf_band_ctrl_type gsf_rf_band_ctrl;

   typedef double _decept_ecef_px_type;
  _decept_ecef_px_type decept_ecef_px;

   typedef double _decept_ecef_py_type;
  _decept_ecef_py_type decept_ecef_py;

   typedef double _decept_ecef_pz_type;
  _decept_ecef_pz_type decept_ecef_pz;

   typedef uint32_t _ild_meas_t_type;
  _ild_meas_t_type ild_meas_t;

   typedef double _rd_ecef_px_type;
  _rd_ecef_px_type rd_ecef_px;

   typedef double _rd_ecef_py_type;
  _rd_ecef_py_type rd_ecef_py;

   typedef double _rd_ecef_pz_type;
  _rd_ecef_pz_type rd_ecef_pz;

   typedef double _rd_ecef_vx_type;
  _rd_ecef_vx_type rd_ecef_vx;

   typedef double _rd_ecef_vy_type;
  _rd_ecef_vy_type rd_ecef_vy;

   typedef double _rd_ecef_vz_type;
  _rd_ecef_vz_type rd_ecef_vz;

   typedef double _ild_ecef_px_type;
  _ild_ecef_px_type ild_ecef_px;

   typedef double _ild_ecef_py_type;
  _ild_ecef_py_type ild_ecef_py;

   typedef double _ild_ecef_pz_type;
  _ild_ecef_pz_type ild_ecef_pz;

   typedef double _ild_ecef_vx_type;
  _ild_ecef_vx_type ild_ecef_vx;

   typedef double _ild_ecef_vy_type;
  _ild_ecef_vy_type ild_ecef_vy;

   typedef double _ild_ecef_vz_type;
  _ild_ecef_vz_type ild_ecef_vz;





  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct payload_gnss_spoofer_cmd_

typedef ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<std::allocator<void> > payload_gnss_spoofer_cmd;

typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd > payload_gnss_spoofer_cmdPtr;
typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd const> payload_gnss_spoofer_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gsf_rf_bhvr == rhs.gsf_rf_bhvr &&
    lhs.gsf_rf_band_ctrl == rhs.gsf_rf_band_ctrl &&
    lhs.decept_ecef_px == rhs.decept_ecef_px &&
    lhs.decept_ecef_py == rhs.decept_ecef_py &&
    lhs.decept_ecef_pz == rhs.decept_ecef_pz &&
    lhs.ild_meas_t == rhs.ild_meas_t &&
    lhs.rd_ecef_px == rhs.rd_ecef_px &&
    lhs.rd_ecef_py == rhs.rd_ecef_py &&
    lhs.rd_ecef_pz == rhs.rd_ecef_pz &&
    lhs.rd_ecef_vx == rhs.rd_ecef_vx &&
    lhs.rd_ecef_vy == rhs.rd_ecef_vy &&
    lhs.rd_ecef_vz == rhs.rd_ecef_vz &&
    lhs.ild_ecef_px == rhs.ild_ecef_px &&
    lhs.ild_ecef_py == rhs.ild_ecef_py &&
    lhs.ild_ecef_pz == rhs.ild_ecef_pz &&
    lhs.ild_ecef_vx == rhs.ild_ecef_vx &&
    lhs.ild_ecef_vy == rhs.ild_ecef_vy &&
    lhs.ild_ecef_vz == rhs.ild_ecef_vz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kari_dronecop_rd_payload_mgmt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d3d5b3b0bb2908b14a9ed90bcf52b55";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d3d5b3b0bb2908bULL;
  static const uint64_t static_value2 = 0x14a9ed90bcf52b55ULL;
};

template<class ContainerAllocator>
struct DataType< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kari_dronecop_rd_payload_mgmt/payload_gnss_spoofer_cmd";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Payload TmTc in ROS env., GNSS Spoofer, command\n"
"# GNSS Spoofer RF behavior(0x00:Off, 0xFF:on)\n"
"# GNSS Spoofer RF band control(ref.:table)\n"
"# Decepted Target Position, X in ECEF(m)\n"
"# Decepted Target Position, Y in ECEF(m)\n"
"# Decepted Target Position, Z in ECEF(m)\n"
"# Time of Decepted Target Measurement Generation(ms)\n"
"# RD Position, X in ECEF(m)\n"
"# RD Position, Y in ECEF(m)\n"
"# RD Position, Z in ECEF(m)\n"
"# RD Velocity, X in ECEF(m/s)\n"
"# RD Velocity, Y in ECEF(m/s)\n"
"# RD Velocity, Z in ECEF(m/s)\n"
"# Illegal Drone Position, X in ECEF(m)\n"
"# Illegal Drone Position, Y in ECEF(m)\n"
"# Illegal Drone Position, Z in ECEF(m)\n"
"# Illegal Drone Velocity, X in ECEF(m/s)\n"
"# Illegal Drone Velocity, Y in ECEF(m/s)\n"
"# Illegal Drone Velocity, Z in ECEF(m/s)\n"
"Header header\n"
"uint8 gsf_rf_bhvr\n"
"int8 gsf_rf_band_ctrl\n"
"float64 decept_ecef_px\n"
"float64 decept_ecef_py\n"
"float64 decept_ecef_pz    \n"
"uint32 ild_meas_t\n"
"float64 rd_ecef_px\n"
"float64 rd_ecef_py\n"
"float64 rd_ecef_pz\n"
"float64 rd_ecef_vx\n"
"float64 rd_ecef_vy\n"
"float64 rd_ecef_vz\n"
"float64 ild_ecef_px\n"
"float64 ild_ecef_py\n"
"float64 ild_ecef_pz\n"
"float64 ild_ecef_vx\n"
"float64 ild_ecef_vy\n"
"float64 ild_ecef_vz\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gsf_rf_bhvr);
      stream.next(m.gsf_rf_band_ctrl);
      stream.next(m.decept_ecef_px);
      stream.next(m.decept_ecef_py);
      stream.next(m.decept_ecef_pz);
      stream.next(m.ild_meas_t);
      stream.next(m.rd_ecef_px);
      stream.next(m.rd_ecef_py);
      stream.next(m.rd_ecef_pz);
      stream.next(m.rd_ecef_vx);
      stream.next(m.rd_ecef_vy);
      stream.next(m.rd_ecef_vz);
      stream.next(m.ild_ecef_px);
      stream.next(m.ild_ecef_py);
      stream.next(m.ild_ecef_pz);
      stream.next(m.ild_ecef_vx);
      stream.next(m.ild_ecef_vy);
      stream.next(m.ild_ecef_vz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct payload_gnss_spoofer_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_cmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gsf_rf_bhvr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gsf_rf_bhvr);
    s << indent << "gsf_rf_band_ctrl: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gsf_rf_band_ctrl);
    s << indent << "decept_ecef_px: ";
    Printer<double>::stream(s, indent + "  ", v.decept_ecef_px);
    s << indent << "decept_ecef_py: ";
    Printer<double>::stream(s, indent + "  ", v.decept_ecef_py);
    s << indent << "decept_ecef_pz: ";
    Printer<double>::stream(s, indent + "  ", v.decept_ecef_pz);
    s << indent << "ild_meas_t: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ild_meas_t);
    s << indent << "rd_ecef_px: ";
    Printer<double>::stream(s, indent + "  ", v.rd_ecef_px);
    s << indent << "rd_ecef_py: ";
    Printer<double>::stream(s, indent + "  ", v.rd_ecef_py);
    s << indent << "rd_ecef_pz: ";
    Printer<double>::stream(s, indent + "  ", v.rd_ecef_pz);
    s << indent << "rd_ecef_vx: ";
    Printer<double>::stream(s, indent + "  ", v.rd_ecef_vx);
    s << indent << "rd_ecef_vy: ";
    Printer<double>::stream(s, indent + "  ", v.rd_ecef_vy);
    s << indent << "rd_ecef_vz: ";
    Printer<double>::stream(s, indent + "  ", v.rd_ecef_vz);
    s << indent << "ild_ecef_px: ";
    Printer<double>::stream(s, indent + "  ", v.ild_ecef_px);
    s << indent << "ild_ecef_py: ";
    Printer<double>::stream(s, indent + "  ", v.ild_ecef_py);
    s << indent << "ild_ecef_pz: ";
    Printer<double>::stream(s, indent + "  ", v.ild_ecef_pz);
    s << indent << "ild_ecef_vx: ";
    Printer<double>::stream(s, indent + "  ", v.ild_ecef_vx);
    s << indent << "ild_ecef_vy: ";
    Printer<double>::stream(s, indent + "  ", v.ild_ecef_vy);
    s << indent << "ild_ecef_vz: ";
    Printer<double>::stream(s, indent + "  ", v.ild_ecef_vz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_GNSS_SPOOFER_CMD_H
