// Generated by gencpp from file kari_dronecop_rd_payload_mgmt/payload_ipm_eoir_mc_status.msg
// DO NOT EDIT!


#ifndef KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_IPM_EOIR_MC_STATUS_H
#define KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_IPM_EOIR_MC_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kari_dronecop_rd_payload_mgmt
{
template <class ContainerAllocator>
struct payload_ipm_eoir_mc_status_
{
  typedef payload_ipm_eoir_mc_status_<ContainerAllocator> Type;

  payload_ipm_eoir_mc_status_()
    : header()
    , illegal_detection_status(0)
    , illegal_target_id(0)
    , illegal_xmin(0.0)
    , illegal_ymin(0.0)
    , illegal_xmax(0.0)
    , illegal_ymax(0.0)
    , illegal_class_id(0)
    , illegal_probability(0.0)
    , illegal_track_id(0)
    , illegal_class_info()
    , illegal_xpos_n(0.0)
    , illegal_ypos_e(0.0)
    , illegal_zpos_d(0.0)
    , illegal_vbx(0.0)
    , illegal_vby(0.0)
    , illegal_vbz(0.0)
    , illegal_azimuth(0.0)
    , illegal_elevation(0.0)
    , illegal_xreldis_n(0.0)
    , illegal_yreldis_e(0.0)
    , illegal_zreldis_d(0.0)
    , illegal_lat(0.0)
    , illegal_lon(0.0)
    , illegal_alt(0.0)
    , drone_gimbal_pan_status(0.0)
    , drone_gimbal_tilt_status(0.0)
    , drone_gimbal_img_select_status(0)
    , drone_gimbal_zoom_status(0)
    , drone_gimbal_capture_status(0)
    , drone_gimbal_ctrl_mode_status(0)  {
    }
  payload_ipm_eoir_mc_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , illegal_detection_status(0)
    , illegal_target_id(0)
    , illegal_xmin(0.0)
    , illegal_ymin(0.0)
    , illegal_xmax(0.0)
    , illegal_ymax(0.0)
    , illegal_class_id(0)
    , illegal_probability(0.0)
    , illegal_track_id(0)
    , illegal_class_info(_alloc)
    , illegal_xpos_n(0.0)
    , illegal_ypos_e(0.0)
    , illegal_zpos_d(0.0)
    , illegal_vbx(0.0)
    , illegal_vby(0.0)
    , illegal_vbz(0.0)
    , illegal_azimuth(0.0)
    , illegal_elevation(0.0)
    , illegal_xreldis_n(0.0)
    , illegal_yreldis_e(0.0)
    , illegal_zreldis_d(0.0)
    , illegal_lat(0.0)
    , illegal_lon(0.0)
    , illegal_alt(0.0)
    , drone_gimbal_pan_status(0.0)
    , drone_gimbal_tilt_status(0.0)
    , drone_gimbal_img_select_status(0)
    , drone_gimbal_zoom_status(0)
    , drone_gimbal_capture_status(0)
    , drone_gimbal_ctrl_mode_status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _illegal_detection_status_type;
  _illegal_detection_status_type illegal_detection_status;

   typedef uint32_t _illegal_target_id_type;
  _illegal_target_id_type illegal_target_id;

   typedef float _illegal_xmin_type;
  _illegal_xmin_type illegal_xmin;

   typedef float _illegal_ymin_type;
  _illegal_ymin_type illegal_ymin;

   typedef float _illegal_xmax_type;
  _illegal_xmax_type illegal_xmax;

   typedef float _illegal_ymax_type;
  _illegal_ymax_type illegal_ymax;

   typedef int8_t _illegal_class_id_type;
  _illegal_class_id_type illegal_class_id;

   typedef float _illegal_probability_type;
  _illegal_probability_type illegal_probability;

   typedef int8_t _illegal_track_id_type;
  _illegal_track_id_type illegal_track_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _illegal_class_info_type;
  _illegal_class_info_type illegal_class_info;

   typedef float _illegal_xpos_n_type;
  _illegal_xpos_n_type illegal_xpos_n;

   typedef float _illegal_ypos_e_type;
  _illegal_ypos_e_type illegal_ypos_e;

   typedef float _illegal_zpos_d_type;
  _illegal_zpos_d_type illegal_zpos_d;

   typedef float _illegal_vbx_type;
  _illegal_vbx_type illegal_vbx;

   typedef float _illegal_vby_type;
  _illegal_vby_type illegal_vby;

   typedef float _illegal_vbz_type;
  _illegal_vbz_type illegal_vbz;

   typedef float _illegal_azimuth_type;
  _illegal_azimuth_type illegal_azimuth;

   typedef float _illegal_elevation_type;
  _illegal_elevation_type illegal_elevation;

   typedef float _illegal_xreldis_n_type;
  _illegal_xreldis_n_type illegal_xreldis_n;

   typedef float _illegal_yreldis_e_type;
  _illegal_yreldis_e_type illegal_yreldis_e;

   typedef float _illegal_zreldis_d_type;
  _illegal_zreldis_d_type illegal_zreldis_d;

   typedef double _illegal_lat_type;
  _illegal_lat_type illegal_lat;

   typedef double _illegal_lon_type;
  _illegal_lon_type illegal_lon;

   typedef double _illegal_alt_type;
  _illegal_alt_type illegal_alt;

   typedef float _drone_gimbal_pan_status_type;
  _drone_gimbal_pan_status_type drone_gimbal_pan_status;

   typedef float _drone_gimbal_tilt_status_type;
  _drone_gimbal_tilt_status_type drone_gimbal_tilt_status;

   typedef int8_t _drone_gimbal_img_select_status_type;
  _drone_gimbal_img_select_status_type drone_gimbal_img_select_status;

   typedef int8_t _drone_gimbal_zoom_status_type;
  _drone_gimbal_zoom_status_type drone_gimbal_zoom_status;

   typedef int8_t _drone_gimbal_capture_status_type;
  _drone_gimbal_capture_status_type drone_gimbal_capture_status;

   typedef int8_t _drone_gimbal_ctrl_mode_status_type;
  _drone_gimbal_ctrl_mode_status_type drone_gimbal_ctrl_mode_status;





  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> const> ConstPtr;

}; // struct payload_ipm_eoir_mc_status_

typedef ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<std::allocator<void> > payload_ipm_eoir_mc_status;

typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status > payload_ipm_eoir_mc_statusPtr;
typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status const> payload_ipm_eoir_mc_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.illegal_detection_status == rhs.illegal_detection_status &&
    lhs.illegal_target_id == rhs.illegal_target_id &&
    lhs.illegal_xmin == rhs.illegal_xmin &&
    lhs.illegal_ymin == rhs.illegal_ymin &&
    lhs.illegal_xmax == rhs.illegal_xmax &&
    lhs.illegal_ymax == rhs.illegal_ymax &&
    lhs.illegal_class_id == rhs.illegal_class_id &&
    lhs.illegal_probability == rhs.illegal_probability &&
    lhs.illegal_track_id == rhs.illegal_track_id &&
    lhs.illegal_class_info == rhs.illegal_class_info &&
    lhs.illegal_xpos_n == rhs.illegal_xpos_n &&
    lhs.illegal_ypos_e == rhs.illegal_ypos_e &&
    lhs.illegal_zpos_d == rhs.illegal_zpos_d &&
    lhs.illegal_vbx == rhs.illegal_vbx &&
    lhs.illegal_vby == rhs.illegal_vby &&
    lhs.illegal_vbz == rhs.illegal_vbz &&
    lhs.illegal_azimuth == rhs.illegal_azimuth &&
    lhs.illegal_elevation == rhs.illegal_elevation &&
    lhs.illegal_xreldis_n == rhs.illegal_xreldis_n &&
    lhs.illegal_yreldis_e == rhs.illegal_yreldis_e &&
    lhs.illegal_zreldis_d == rhs.illegal_zreldis_d &&
    lhs.illegal_lat == rhs.illegal_lat &&
    lhs.illegal_lon == rhs.illegal_lon &&
    lhs.illegal_alt == rhs.illegal_alt &&
    lhs.drone_gimbal_pan_status == rhs.drone_gimbal_pan_status &&
    lhs.drone_gimbal_tilt_status == rhs.drone_gimbal_tilt_status &&
    lhs.drone_gimbal_img_select_status == rhs.drone_gimbal_img_select_status &&
    lhs.drone_gimbal_zoom_status == rhs.drone_gimbal_zoom_status &&
    lhs.drone_gimbal_capture_status == rhs.drone_gimbal_capture_status &&
    lhs.drone_gimbal_ctrl_mode_status == rhs.drone_gimbal_ctrl_mode_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kari_dronecop_rd_payload_mgmt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff93e948895e6207e623c31de69bc5b7";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff93e948895e6207ULL;
  static const uint64_t static_value2 = 0xe623c31de69bc5b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kari_dronecop_rd_payload_mgmt/payload_ipm_eoir_mc_status";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Payload TmTc in ROS env., from IPM to MC status\n"
"Header header\n"
"uint8 illegal_detection_status\n"
"uint32 illegal_target_id\n"
"float32 illegal_xmin\n"
"float32 illegal_ymin\n"
"float32 illegal_xmax\n"
"float32 illegal_ymax\n"
"int8 illegal_class_id\n"
"float32 illegal_probability\n"
"int8 illegal_track_id\n"
"string illegal_class_info\n"
"float32 illegal_xpos_n\n"
"float32 illegal_ypos_e\n"
"float32 illegal_zpos_d\n"
"float32 illegal_vbx\n"
"float32 illegal_vby\n"
"float32 illegal_vbz\n"
"float32 illegal_azimuth\n"
"float32 illegal_elevation\n"
"float32 illegal_xreldis_n\n"
"float32 illegal_yreldis_e\n"
"float32 illegal_zreldis_d\n"
"float64 illegal_lat\n"
"float64 illegal_lon\n"
"float64 illegal_alt\n"
"float32 drone_gimbal_pan_status\n"
"float32 drone_gimbal_tilt_status\n"
"int8 drone_gimbal_img_select_status\n"
"int8 drone_gimbal_zoom_status\n"
"int8 drone_gimbal_capture_status\n"
"int8 drone_gimbal_ctrl_mode_status\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.illegal_detection_status);
      stream.next(m.illegal_target_id);
      stream.next(m.illegal_xmin);
      stream.next(m.illegal_ymin);
      stream.next(m.illegal_xmax);
      stream.next(m.illegal_ymax);
      stream.next(m.illegal_class_id);
      stream.next(m.illegal_probability);
      stream.next(m.illegal_track_id);
      stream.next(m.illegal_class_info);
      stream.next(m.illegal_xpos_n);
      stream.next(m.illegal_ypos_e);
      stream.next(m.illegal_zpos_d);
      stream.next(m.illegal_vbx);
      stream.next(m.illegal_vby);
      stream.next(m.illegal_vbz);
      stream.next(m.illegal_azimuth);
      stream.next(m.illegal_elevation);
      stream.next(m.illegal_xreldis_n);
      stream.next(m.illegal_yreldis_e);
      stream.next(m.illegal_zreldis_d);
      stream.next(m.illegal_lat);
      stream.next(m.illegal_lon);
      stream.next(m.illegal_alt);
      stream.next(m.drone_gimbal_pan_status);
      stream.next(m.drone_gimbal_tilt_status);
      stream.next(m.drone_gimbal_img_select_status);
      stream.next(m.drone_gimbal_zoom_status);
      stream.next(m.drone_gimbal_capture_status);
      stream.next(m.drone_gimbal_ctrl_mode_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct payload_ipm_eoir_mc_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kari_dronecop_rd_payload_mgmt::payload_ipm_eoir_mc_status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "illegal_detection_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.illegal_detection_status);
    s << indent << "illegal_target_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.illegal_target_id);
    s << indent << "illegal_xmin: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_xmin);
    s << indent << "illegal_ymin: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_ymin);
    s << indent << "illegal_xmax: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_xmax);
    s << indent << "illegal_ymax: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_ymax);
    s << indent << "illegal_class_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.illegal_class_id);
    s << indent << "illegal_probability: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_probability);
    s << indent << "illegal_track_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.illegal_track_id);
    s << indent << "illegal_class_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.illegal_class_info);
    s << indent << "illegal_xpos_n: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_xpos_n);
    s << indent << "illegal_ypos_e: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_ypos_e);
    s << indent << "illegal_zpos_d: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_zpos_d);
    s << indent << "illegal_vbx: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_vbx);
    s << indent << "illegal_vby: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_vby);
    s << indent << "illegal_vbz: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_vbz);
    s << indent << "illegal_azimuth: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_azimuth);
    s << indent << "illegal_elevation: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_elevation);
    s << indent << "illegal_xreldis_n: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_xreldis_n);
    s << indent << "illegal_yreldis_e: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_yreldis_e);
    s << indent << "illegal_zreldis_d: ";
    Printer<float>::stream(s, indent + "  ", v.illegal_zreldis_d);
    s << indent << "illegal_lat: ";
    Printer<double>::stream(s, indent + "  ", v.illegal_lat);
    s << indent << "illegal_lon: ";
    Printer<double>::stream(s, indent + "  ", v.illegal_lon);
    s << indent << "illegal_alt: ";
    Printer<double>::stream(s, indent + "  ", v.illegal_alt);
    s << indent << "drone_gimbal_pan_status: ";
    Printer<float>::stream(s, indent + "  ", v.drone_gimbal_pan_status);
    s << indent << "drone_gimbal_tilt_status: ";
    Printer<float>::stream(s, indent + "  ", v.drone_gimbal_tilt_status);
    s << indent << "drone_gimbal_img_select_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.drone_gimbal_img_select_status);
    s << indent << "drone_gimbal_zoom_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.drone_gimbal_zoom_status);
    s << indent << "drone_gimbal_capture_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.drone_gimbal_capture_status);
    s << indent << "drone_gimbal_ctrl_mode_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.drone_gimbal_ctrl_mode_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_IPM_EOIR_MC_STATUS_H
