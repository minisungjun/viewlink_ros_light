// Generated by gencpp from file kari_dronecop_rd_payload_mgmt/payload_realsense_stereocam_target_ptcloud_status.msg
// DO NOT EDIT!


#ifndef KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_REALSENSE_STEREOCAM_TARGET_PTCLOUD_STATUS_H
#define KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_REALSENSE_STEREOCAM_TARGET_PTCLOUD_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kari_dronecop_rd_payload_mgmt
{
template <class ContainerAllocator>
struct payload_realsense_stereocam_target_ptcloud_status_
{
  typedef payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> Type;

  payload_realsense_stereocam_target_ptcloud_status_()
    : xbrel(0.0)
    , ybrel(0.0)
    , zbrel(0.0)  {
    }
  payload_realsense_stereocam_target_ptcloud_status_(const ContainerAllocator& _alloc)
    : xbrel(0.0)
    , ybrel(0.0)
    , zbrel(0.0)  {
  (void)_alloc;
    }



   typedef float _xbrel_type;
  _xbrel_type xbrel;

   typedef float _ybrel_type;
  _ybrel_type ybrel;

   typedef float _zbrel_type;
  _zbrel_type zbrel;





  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> const> ConstPtr;

}; // struct payload_realsense_stereocam_target_ptcloud_status_

typedef ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<std::allocator<void> > payload_realsense_stereocam_target_ptcloud_status;

typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status > payload_realsense_stereocam_target_ptcloud_statusPtr;
typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status const> payload_realsense_stereocam_target_ptcloud_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator2> & rhs)
{
  return lhs.xbrel == rhs.xbrel &&
    lhs.ybrel == rhs.ybrel &&
    lhs.zbrel == rhs.zbrel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kari_dronecop_rd_payload_mgmt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "165105fea51d9dc169eb818cc814a168";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x165105fea51d9dc1ULL;
  static const uint64_t static_value2 = 0x69eb818cc814a168ULL;
};

template<class ContainerAllocator>
struct DataType< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kari_dronecop_rd_payload_mgmt/payload_realsense_stereocam_target_ptcloud_status";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Payload TmTc in ROS env., Intel Realsense Stereo Camera, target pointcloud status\n"
"float32 xbrel\n"
"float32 ybrel\n"
"float32 zbrel\n"
;
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xbrel);
      stream.next(m.ybrel);
      stream.next(m.zbrel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct payload_realsense_stereocam_target_ptcloud_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kari_dronecop_rd_payload_mgmt::payload_realsense_stereocam_target_ptcloud_status_<ContainerAllocator>& v)
  {
    s << indent << "xbrel: ";
    Printer<float>::stream(s, indent + "  ", v.xbrel);
    s << indent << "ybrel: ";
    Printer<float>::stream(s, indent + "  ", v.ybrel);
    s << indent << "zbrel: ";
    Printer<float>::stream(s, indent + "  ", v.zbrel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_REALSENSE_STEREOCAM_TARGET_PTCLOUD_STATUS_H
