// Generated by gencpp from file kari_dronecop_rd_payload_mgmt/payload_mc_ipm_eoir_cmd.msg
// DO NOT EDIT!


#ifndef KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_MC_IPM_EOIR_CMD_H
#define KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_MC_IPM_EOIR_CMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kari_dronecop_rd_payload_mgmt
{
template <class ContainerAllocator>
struct payload_mc_ipm_eoir_cmd_
{
  typedef payload_mc_ipm_eoir_cmd_<ContainerAllocator> Type;

  payload_mc_ipm_eoir_cmd_()
    : header()
    , drone_xpos_n(0.0)
    , drone_ypos_e(0.0)
    , drone_zpos_d(0.0)
    , drone_vbx(0.0)
    , drone_vby(0.0)
    , drone_vbz(0.0)
    , drone_roll(0.0)
    , drone_pitch(0.0)
    , drone_yaw(0.0)
    , drone_p(0.0)
    , drone_q(0.0)
    , drone_r(0.0)
    , drone_flight_status(0)
    , pan_rate_cmd(0.0)
    , tilt_rate_cmd(0.0)
    , zoom_pos_cmd(0.0)
    , img_select_cmd(0)
    , img_capture_cmd(0)
    , homing_mode_cmd(0)
    , netgun_mode_cmd(0)
    , offbd_mode_cmd(0)  {
    }
  payload_mc_ipm_eoir_cmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , drone_xpos_n(0.0)
    , drone_ypos_e(0.0)
    , drone_zpos_d(0.0)
    , drone_vbx(0.0)
    , drone_vby(0.0)
    , drone_vbz(0.0)
    , drone_roll(0.0)
    , drone_pitch(0.0)
    , drone_yaw(0.0)
    , drone_p(0.0)
    , drone_q(0.0)
    , drone_r(0.0)
    , drone_flight_status(0)
    , pan_rate_cmd(0.0)
    , tilt_rate_cmd(0.0)
    , zoom_pos_cmd(0.0)
    , img_select_cmd(0)
    , img_capture_cmd(0)
    , homing_mode_cmd(0)
    , netgun_mode_cmd(0)
    , offbd_mode_cmd(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _drone_xpos_n_type;
  _drone_xpos_n_type drone_xpos_n;

   typedef float _drone_ypos_e_type;
  _drone_ypos_e_type drone_ypos_e;

   typedef float _drone_zpos_d_type;
  _drone_zpos_d_type drone_zpos_d;

   typedef float _drone_vbx_type;
  _drone_vbx_type drone_vbx;

   typedef float _drone_vby_type;
  _drone_vby_type drone_vby;

   typedef float _drone_vbz_type;
  _drone_vbz_type drone_vbz;

   typedef float _drone_roll_type;
  _drone_roll_type drone_roll;

   typedef float _drone_pitch_type;
  _drone_pitch_type drone_pitch;

   typedef float _drone_yaw_type;
  _drone_yaw_type drone_yaw;

   typedef float _drone_p_type;
  _drone_p_type drone_p;

   typedef float _drone_q_type;
  _drone_q_type drone_q;

   typedef float _drone_r_type;
  _drone_r_type drone_r;

   typedef int8_t _drone_flight_status_type;
  _drone_flight_status_type drone_flight_status;

   typedef double _pan_rate_cmd_type;
  _pan_rate_cmd_type pan_rate_cmd;

   typedef double _tilt_rate_cmd_type;
  _tilt_rate_cmd_type tilt_rate_cmd;

   typedef double _zoom_pos_cmd_type;
  _zoom_pos_cmd_type zoom_pos_cmd;

   typedef int8_t _img_select_cmd_type;
  _img_select_cmd_type img_select_cmd;

   typedef int8_t _img_capture_cmd_type;
  _img_capture_cmd_type img_capture_cmd;

   typedef int8_t _homing_mode_cmd_type;
  _homing_mode_cmd_type homing_mode_cmd;

   typedef int8_t _netgun_mode_cmd_type;
  _netgun_mode_cmd_type netgun_mode_cmd;

   typedef int8_t _offbd_mode_cmd_type;
  _offbd_mode_cmd_type offbd_mode_cmd;





  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct payload_mc_ipm_eoir_cmd_

typedef ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<std::allocator<void> > payload_mc_ipm_eoir_cmd;

typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd > payload_mc_ipm_eoir_cmdPtr;
typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd const> payload_mc_ipm_eoir_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.drone_xpos_n == rhs.drone_xpos_n &&
    lhs.drone_ypos_e == rhs.drone_ypos_e &&
    lhs.drone_zpos_d == rhs.drone_zpos_d &&
    lhs.drone_vbx == rhs.drone_vbx &&
    lhs.drone_vby == rhs.drone_vby &&
    lhs.drone_vbz == rhs.drone_vbz &&
    lhs.drone_roll == rhs.drone_roll &&
    lhs.drone_pitch == rhs.drone_pitch &&
    lhs.drone_yaw == rhs.drone_yaw &&
    lhs.drone_p == rhs.drone_p &&
    lhs.drone_q == rhs.drone_q &&
    lhs.drone_r == rhs.drone_r &&
    lhs.drone_flight_status == rhs.drone_flight_status &&
    lhs.pan_rate_cmd == rhs.pan_rate_cmd &&
    lhs.tilt_rate_cmd == rhs.tilt_rate_cmd &&
    lhs.zoom_pos_cmd == rhs.zoom_pos_cmd &&
    lhs.img_select_cmd == rhs.img_select_cmd &&
    lhs.img_capture_cmd == rhs.img_capture_cmd &&
    lhs.homing_mode_cmd == rhs.homing_mode_cmd &&
    lhs.netgun_mode_cmd == rhs.netgun_mode_cmd &&
    lhs.offbd_mode_cmd == rhs.offbd_mode_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kari_dronecop_rd_payload_mgmt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aca6841a362c6e6aa94747957e3ec229";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaca6841a362c6e6aULL;
  static const uint64_t static_value2 = 0xa94747957e3ec229ULL;
};

template<class ContainerAllocator>
struct DataType< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kari_dronecop_rd_payload_mgmt/payload_mc_ipm_eoir_cmd";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Payload TmTc in ROS env., from MC to IPM status\n"
"Header header\n"
"float32 drone_xpos_n\n"
"float32 drone_ypos_e\n"
"float32 drone_zpos_d\n"
"float32 drone_vbx\n"
"float32 drone_vby\n"
"float32 drone_vbz\n"
"float32 drone_roll\n"
"float32 drone_pitch\n"
"float32 drone_yaw\n"
"float32 drone_p\n"
"float32 drone_q\n"
"float32 drone_r\n"
"int8 drone_flight_status\n"
"float64 pan_rate_cmd\n"
"float64 tilt_rate_cmd\n"
"float64 zoom_pos_cmd\n"
"int8 img_select_cmd\n"
"int8 img_capture_cmd\n"
"int8 homing_mode_cmd\n"
"int8 netgun_mode_cmd\n"
"int8 offbd_mode_cmd\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.drone_xpos_n);
      stream.next(m.drone_ypos_e);
      stream.next(m.drone_zpos_d);
      stream.next(m.drone_vbx);
      stream.next(m.drone_vby);
      stream.next(m.drone_vbz);
      stream.next(m.drone_roll);
      stream.next(m.drone_pitch);
      stream.next(m.drone_yaw);
      stream.next(m.drone_p);
      stream.next(m.drone_q);
      stream.next(m.drone_r);
      stream.next(m.drone_flight_status);
      stream.next(m.pan_rate_cmd);
      stream.next(m.tilt_rate_cmd);
      stream.next(m.zoom_pos_cmd);
      stream.next(m.img_select_cmd);
      stream.next(m.img_capture_cmd);
      stream.next(m.homing_mode_cmd);
      stream.next(m.netgun_mode_cmd);
      stream.next(m.offbd_mode_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct payload_mc_ipm_eoir_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kari_dronecop_rd_payload_mgmt::payload_mc_ipm_eoir_cmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "drone_xpos_n: ";
    Printer<float>::stream(s, indent + "  ", v.drone_xpos_n);
    s << indent << "drone_ypos_e: ";
    Printer<float>::stream(s, indent + "  ", v.drone_ypos_e);
    s << indent << "drone_zpos_d: ";
    Printer<float>::stream(s, indent + "  ", v.drone_zpos_d);
    s << indent << "drone_vbx: ";
    Printer<float>::stream(s, indent + "  ", v.drone_vbx);
    s << indent << "drone_vby: ";
    Printer<float>::stream(s, indent + "  ", v.drone_vby);
    s << indent << "drone_vbz: ";
    Printer<float>::stream(s, indent + "  ", v.drone_vbz);
    s << indent << "drone_roll: ";
    Printer<float>::stream(s, indent + "  ", v.drone_roll);
    s << indent << "drone_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.drone_pitch);
    s << indent << "drone_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.drone_yaw);
    s << indent << "drone_p: ";
    Printer<float>::stream(s, indent + "  ", v.drone_p);
    s << indent << "drone_q: ";
    Printer<float>::stream(s, indent + "  ", v.drone_q);
    s << indent << "drone_r: ";
    Printer<float>::stream(s, indent + "  ", v.drone_r);
    s << indent << "drone_flight_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.drone_flight_status);
    s << indent << "pan_rate_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.pan_rate_cmd);
    s << indent << "tilt_rate_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.tilt_rate_cmd);
    s << indent << "zoom_pos_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.zoom_pos_cmd);
    s << indent << "img_select_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.img_select_cmd);
    s << indent << "img_capture_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.img_capture_cmd);
    s << indent << "homing_mode_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.homing_mode_cmd);
    s << indent << "netgun_mode_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.netgun_mode_cmd);
    s << indent << "offbd_mode_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.offbd_mode_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_MC_IPM_EOIR_CMD_H
