// Generated by gencpp from file kari_dronecop_rd_payload_mgmt/payload_decepter_cmd.msg
// DO NOT EDIT!


#ifndef KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_DECEPTER_CMD_H
#define KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_DECEPTER_CMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kari_dronecop_rd_payload_mgmt
{
template <class ContainerAllocator>
struct payload_decepter_cmd_
{
  typedef payload_decepter_cmd_<ContainerAllocator> Type;

  payload_decepter_cmd_()
    : header()
    , dct_neutralize_start_stop(0)
    , dct_neutralize_target_id(0)
    , dct_neutralize_manufacturer(0)
    , dct_neutralize_model(0)
    , rsn_neutralize_mac()
    , rsn_neutralize_frequency(0.0)
    , rsn_control_latitude(0.0)
    , rsn_control_longitude(0.0)
    , rsn_control_altitude(0.0)  {
    }
  payload_decepter_cmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , dct_neutralize_start_stop(0)
    , dct_neutralize_target_id(0)
    , dct_neutralize_manufacturer(0)
    , dct_neutralize_model(0)
    , rsn_neutralize_mac(_alloc)
    , rsn_neutralize_frequency(0.0)
    , rsn_control_latitude(0.0)
    , rsn_control_longitude(0.0)
    , rsn_control_altitude(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _dct_neutralize_start_stop_type;
  _dct_neutralize_start_stop_type dct_neutralize_start_stop;

   typedef uint32_t _dct_neutralize_target_id_type;
  _dct_neutralize_target_id_type dct_neutralize_target_id;

   typedef uint32_t _dct_neutralize_manufacturer_type;
  _dct_neutralize_manufacturer_type dct_neutralize_manufacturer;

   typedef uint32_t _dct_neutralize_model_type;
  _dct_neutralize_model_type dct_neutralize_model;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _rsn_neutralize_mac_type;
  _rsn_neutralize_mac_type rsn_neutralize_mac;

   typedef float _rsn_neutralize_frequency_type;
  _rsn_neutralize_frequency_type rsn_neutralize_frequency;

   typedef double _rsn_control_latitude_type;
  _rsn_control_latitude_type rsn_control_latitude;

   typedef double _rsn_control_longitude_type;
  _rsn_control_longitude_type rsn_control_longitude;

   typedef double _rsn_control_altitude_type;
  _rsn_control_altitude_type rsn_control_altitude;





  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct payload_decepter_cmd_

typedef ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<std::allocator<void> > payload_decepter_cmd;

typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd > payload_decepter_cmdPtr;
typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd const> payload_decepter_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.dct_neutralize_start_stop == rhs.dct_neutralize_start_stop &&
    lhs.dct_neutralize_target_id == rhs.dct_neutralize_target_id &&
    lhs.dct_neutralize_manufacturer == rhs.dct_neutralize_manufacturer &&
    lhs.dct_neutralize_model == rhs.dct_neutralize_model &&
    lhs.rsn_neutralize_mac == rhs.rsn_neutralize_mac &&
    lhs.rsn_neutralize_frequency == rhs.rsn_neutralize_frequency &&
    lhs.rsn_control_latitude == rhs.rsn_control_latitude &&
    lhs.rsn_control_longitude == rhs.rsn_control_longitude &&
    lhs.rsn_control_altitude == rhs.rsn_control_altitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kari_dronecop_rd_payload_mgmt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac553835a644d144c3936ef395338b65";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac553835a644d144ULL;
  static const uint64_t static_value2 = 0xc3936ef395338b65ULL;
};

template<class ContainerAllocator>
struct DataType< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kari_dronecop_rd_payload_mgmt/payload_decepter_cmd";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Payload TmTc in ROS env., Decepter, command\n"
"# Decepter neutralize start/stop command\n"
"# Decepter neutralize target ID\n"
"# Decepter neutralize target RSN manufacturer\n"
"# Decepter neutralize target RSN model\n"
"# Decepter neutralize target MAC address\n"
"# Decepter neutralize target frequency\n"
"# Decepter neutralize target landing position after flight control, latitude[deg]\n"
"# Decepter neutralize target landing position after flight control, longitude[deg]\n"
"# Decepter neutralize target landing position after flight control, altitude[m]\n"
"Header header\n"
"uint32 dct_neutralize_start_stop\n"
"uint32 dct_neutralize_target_id\n"
"uint32 dct_neutralize_manufacturer\n"
"uint32 dct_neutralize_model\n"
"string rsn_neutralize_mac\n"
"float32 rsn_neutralize_frequency\n"
"float64 rsn_control_latitude\n"
"float64 rsn_control_longitude\n"
"float64 rsn_control_altitude\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.dct_neutralize_start_stop);
      stream.next(m.dct_neutralize_target_id);
      stream.next(m.dct_neutralize_manufacturer);
      stream.next(m.dct_neutralize_model);
      stream.next(m.rsn_neutralize_mac);
      stream.next(m.rsn_neutralize_frequency);
      stream.next(m.rsn_control_latitude);
      stream.next(m.rsn_control_longitude);
      stream.next(m.rsn_control_altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct payload_decepter_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kari_dronecop_rd_payload_mgmt::payload_decepter_cmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dct_neutralize_start_stop: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dct_neutralize_start_stop);
    s << indent << "dct_neutralize_target_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dct_neutralize_target_id);
    s << indent << "dct_neutralize_manufacturer: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dct_neutralize_manufacturer);
    s << indent << "dct_neutralize_model: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dct_neutralize_model);
    s << indent << "rsn_neutralize_mac: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.rsn_neutralize_mac);
    s << indent << "rsn_neutralize_frequency: ";
    Printer<float>::stream(s, indent + "  ", v.rsn_neutralize_frequency);
    s << indent << "rsn_control_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.rsn_control_latitude);
    s << indent << "rsn_control_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.rsn_control_longitude);
    s << indent << "rsn_control_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.rsn_control_altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_DECEPTER_CMD_H
