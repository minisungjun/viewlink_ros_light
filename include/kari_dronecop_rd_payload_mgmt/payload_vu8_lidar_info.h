// Generated by gencpp from file kari_dronecop_rd_payload_mgmt/payload_vu8_lidar_info.msg
// DO NOT EDIT!


#ifndef KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_VU8_LIDAR_INFO_H
#define KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_VU8_LIDAR_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <kari_dronecop_rd_payload_mgmt/payload_vu8_lidar_chunk.h>

namespace kari_dronecop_rd_payload_mgmt
{
template <class ContainerAllocator>
struct payload_vu8_lidar_info_
{
  typedef payload_vu8_lidar_info_<ContainerAllocator> Type;

  payload_vu8_lidar_info_()
    : header()
    , node_status(0)
    , vu_chunk_array()
    , lidar_status(false)
    , error_code(0)  {
    }
  payload_vu8_lidar_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , node_status(0)
    , vu_chunk_array(_alloc)
    , lidar_status(false)
    , error_code(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _node_status_type;
  _node_status_type node_status;

   typedef std::vector< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_chunk_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_chunk_<ContainerAllocator> >> _vu_chunk_array_type;
  _vu_chunk_array_type vu_chunk_array;

   typedef uint8_t _lidar_status_type;
  _lidar_status_type lidar_status;

   typedef int8_t _error_code_type;
  _error_code_type error_code;





  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> const> ConstPtr;

}; // struct payload_vu8_lidar_info_

typedef ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<std::allocator<void> > payload_vu8_lidar_info;

typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info > payload_vu8_lidar_infoPtr;
typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info const> payload_vu8_lidar_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.node_status == rhs.node_status &&
    lhs.vu_chunk_array == rhs.vu_chunk_array &&
    lhs.lidar_status == rhs.lidar_status &&
    lhs.error_code == rhs.error_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kari_dronecop_rd_payload_mgmt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e86ceed75a5f50af51fea9b011cc7ecf";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe86ceed75a5f50afULL;
  static const uint64_t static_value2 = 0x51fea9b011cc7ecfULL;
};

template<class ContainerAllocator>
struct DataType< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kari_dronecop_rd_payload_mgmt/payload_vu8_lidar_info";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Payload TmTc in ROS env., Vu8 LiDAR\n"
"Header header\n"
"int8 node_status\n"
"payload_vu8_lidar_chunk[] vu_chunk_array\n"
"bool lidar_status\n"
"int8 error_code\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: kari_dronecop_rd_payload_mgmt/payload_vu8_lidar_chunk\n"
"# Payload TmTc in ROS env., Vu8 LiDAR\n"
"float32 range\n"
"float32 angle\n"
"float32 xrel\n"
"float32 yrel\n"
"float32 amplitude\n"
"bool segment_status\n"
"int8 error_code\n"
;
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.node_status);
      stream.next(m.vu_chunk_array);
      stream.next(m.lidar_status);
      stream.next(m.error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct payload_vu8_lidar_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "node_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.node_status);
    s << indent << "vu_chunk_array[]" << std::endl;
    for (size_t i = 0; i < v.vu_chunk_array.size(); ++i)
    {
      s << indent << "  vu_chunk_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kari_dronecop_rd_payload_mgmt::payload_vu8_lidar_chunk_<ContainerAllocator> >::stream(s, indent + "    ", v.vu_chunk_array[i]);
    }
    s << indent << "lidar_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lidar_status);
    s << indent << "error_code: ";
    Printer<int8_t>::stream(s, indent + "  ", v.error_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_VU8_LIDAR_INFO_H
