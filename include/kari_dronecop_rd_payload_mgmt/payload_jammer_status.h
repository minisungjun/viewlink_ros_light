// Generated by gencpp from file kari_dronecop_rd_payload_mgmt/payload_jammer_status.msg
// DO NOT EDIT!


#ifndef KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_JAMMER_STATUS_H
#define KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_JAMMER_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kari_dronecop_rd_payload_mgmt
{
template <class ContainerAllocator>
struct payload_jammer_status_
{
  typedef payload_jammer_status_<ContainerAllocator> Type;

  payload_jammer_status_()
    : header()
    , jammer_call_status(0)
    , f433mhz_band_jmr_stu(0)
    , f900mhz_band_jmr_stu(0)
    , s_band_band_jmr_stu(0)
    , c_band_band_jmr_stu(0)  {
    }
  payload_jammer_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , jammer_call_status(0)
    , f433mhz_band_jmr_stu(0)
    , f900mhz_band_jmr_stu(0)
    , s_band_band_jmr_stu(0)
    , c_band_band_jmr_stu(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _jammer_call_status_type;
  _jammer_call_status_type jammer_call_status;

   typedef uint8_t _f433mhz_band_jmr_stu_type;
  _f433mhz_band_jmr_stu_type f433mhz_band_jmr_stu;

   typedef uint8_t _f900mhz_band_jmr_stu_type;
  _f900mhz_band_jmr_stu_type f900mhz_band_jmr_stu;

   typedef uint8_t _s_band_band_jmr_stu_type;
  _s_band_band_jmr_stu_type s_band_band_jmr_stu;

   typedef uint8_t _c_band_band_jmr_stu_type;
  _c_band_band_jmr_stu_type c_band_band_jmr_stu;





  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> const> ConstPtr;

}; // struct payload_jammer_status_

typedef ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<std::allocator<void> > payload_jammer_status;

typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status > payload_jammer_statusPtr;
typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status const> payload_jammer_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.jammer_call_status == rhs.jammer_call_status &&
    lhs.f433mhz_band_jmr_stu == rhs.f433mhz_band_jmr_stu &&
    lhs.f900mhz_band_jmr_stu == rhs.f900mhz_band_jmr_stu &&
    lhs.s_band_band_jmr_stu == rhs.s_band_band_jmr_stu &&
    lhs.c_band_band_jmr_stu == rhs.c_band_band_jmr_stu;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kari_dronecop_rd_payload_mgmt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38e5118a1ebe62c5d01a1952540585a3";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38e5118a1ebe62c5ULL;
  static const uint64_t static_value2 = 0xd01a1952540585a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kari_dronecop_rd_payload_mgmt/payload_jammer_status";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Payload TmTc in ROS env., Jammer, status\n"
"# 433MHz band jamming, status bit no.:0(1: normal(launch), 0: error(termination))\n"
"# 900MHz band jamming, status bit no.:0(1: normal(launch), 0: error(termination))\n"
"# 433MHz band jamming, status bit no.:0(1: normal(launch), 0: error(termination))\n"
"# 433MHz band jamming, status bit no.:0(1: normal(launch), 0: error(termination))\n"
"Header header\n"
"uint8 jammer_call_status\n"
"uint8 f433mhz_band_jmr_stu\n"
"uint8 f900mhz_band_jmr_stu\n"
"uint8 s_band_band_jmr_stu\n"
"uint8 c_band_band_jmr_stu\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.jammer_call_status);
      stream.next(m.f433mhz_band_jmr_stu);
      stream.next(m.f900mhz_band_jmr_stu);
      stream.next(m.s_band_band_jmr_stu);
      stream.next(m.c_band_band_jmr_stu);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct payload_jammer_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kari_dronecop_rd_payload_mgmt::payload_jammer_status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "jammer_call_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.jammer_call_status);
    s << indent << "f433mhz_band_jmr_stu: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.f433mhz_band_jmr_stu);
    s << indent << "f900mhz_band_jmr_stu: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.f900mhz_band_jmr_stu);
    s << indent << "s_band_band_jmr_stu: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.s_band_band_jmr_stu);
    s << indent << "c_band_band_jmr_stu: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c_band_band_jmr_stu);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_JAMMER_STATUS_H
