// Generated by gencpp from file kari_dronecop_rd_payload_mgmt/payload_gnss_spoofer_status.msg
// DO NOT EDIT!


#ifndef KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_GNSS_SPOOFER_STATUS_H
#define KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_GNSS_SPOOFER_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kari_dronecop_rd_payload_mgmt
{
template <class ContainerAllocator>
struct payload_gnss_spoofer_status_
{
  typedef payload_gnss_spoofer_status_<ContainerAllocator> Type;

  payload_gnss_spoofer_status_()
    : header()
    , gsf_ready(0)
    , gsf_rf_bhvr(0)
    , gsf_rf_band_stat(0)
    , gps_out_stat(0)
    , glonass_out_stat(0)
    , gsf_holdover_stat(0)  {
    }
  payload_gnss_spoofer_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gsf_ready(0)
    , gsf_rf_bhvr(0)
    , gsf_rf_band_stat(0)
    , gps_out_stat(0)
    , glonass_out_stat(0)
    , gsf_holdover_stat(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _gsf_ready_type;
  _gsf_ready_type gsf_ready;

   typedef uint8_t _gsf_rf_bhvr_type;
  _gsf_rf_bhvr_type gsf_rf_bhvr;

   typedef uint8_t _gsf_rf_band_stat_type;
  _gsf_rf_band_stat_type gsf_rf_band_stat;

   typedef uint32_t _gps_out_stat_type;
  _gps_out_stat_type gps_out_stat;

   typedef uint32_t _glonass_out_stat_type;
  _glonass_out_stat_type glonass_out_stat;

   typedef uint32_t _gsf_holdover_stat_type;
  _gsf_holdover_stat_type gsf_holdover_stat;





  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> const> ConstPtr;

}; // struct payload_gnss_spoofer_status_

typedef ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<std::allocator<void> > payload_gnss_spoofer_status;

typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status > payload_gnss_spoofer_statusPtr;
typedef boost::shared_ptr< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status const> payload_gnss_spoofer_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gsf_ready == rhs.gsf_ready &&
    lhs.gsf_rf_bhvr == rhs.gsf_rf_bhvr &&
    lhs.gsf_rf_band_stat == rhs.gsf_rf_band_stat &&
    lhs.gps_out_stat == rhs.gps_out_stat &&
    lhs.glonass_out_stat == rhs.glonass_out_stat &&
    lhs.gsf_holdover_stat == rhs.gsf_holdover_stat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator1> & lhs, const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kari_dronecop_rd_payload_mgmt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80676800eba934f5e6cc8cd46d3ee18b";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80676800eba934f5ULL;
  static const uint64_t static_value2 = 0xe6cc8cd46d3ee18bULL;
};

template<class ContainerAllocator>
struct DataType< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kari_dronecop_rd_payload_mgmt/payload_gnss_spoofer_status";
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Payload TmTc in ROS env., GNSS Spoofer, status\n"
"# GNSS Spoofer Ready Status(0: not ready, 1: ready)\n"
"# GNSS Spoofer RF behavior(0-3:RF behavior)(0x00:Off, 0xFF:on)\n"
"# GNSS Spoofer RF band status(ref.:table)\n"
"# GPS output status(each bit sat, on/off)\n"
"# GLONASS output status(each bit sat, on/off)\n"
"# GNSS Spoofer holdover status(0:off, 1:on)\n"
"Header header\n"
"uint8 gsf_ready\n"
"uint8 gsf_rf_bhvr\n"
"uint8 gsf_rf_band_stat\n"
"uint32 gps_out_stat\n"
"uint32 glonass_out_stat\n"
"uint32 gsf_holdover_stat\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gsf_ready);
      stream.next(m.gsf_rf_bhvr);
      stream.next(m.gsf_rf_band_stat);
      stream.next(m.gps_out_stat);
      stream.next(m.glonass_out_stat);
      stream.next(m.gsf_holdover_stat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct payload_gnss_spoofer_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kari_dronecop_rd_payload_mgmt::payload_gnss_spoofer_status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gsf_ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gsf_ready);
    s << indent << "gsf_rf_bhvr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gsf_rf_bhvr);
    s << indent << "gsf_rf_band_stat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gsf_rf_band_stat);
    s << indent << "gps_out_stat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gps_out_stat);
    s << indent << "glonass_out_stat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.glonass_out_stat);
    s << indent << "gsf_holdover_stat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gsf_holdover_stat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARI_DRONECOP_RD_PAYLOAD_MGMT_MESSAGE_PAYLOAD_GNSS_SPOOFER_STATUS_H
